<?php
namespace App\Filament\{{panel}}\Resources;

use App\Filament\{{panel}}\Resources\FAQResource\Pages;
use App\Filament\Helpers\FilamentHelpers;
use App\Models\FAQ;
use App\Traits\Filament\FilamentCountBadgeResource;
use App\Traits\Filament\FilamentTranslatedLabelResource;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Filters\TernaryFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class FAQResource extends Resource
{
    use FilamentCountBadgeResource;
    use FilamentTranslatedLabelResource;
    use Translatable;

    protected static ?string $model = FAQ::class;

    protected static ?int $navigationSort = 99;

    protected static ?string $navigationIcon = 'heroicon-o-question-mark-circle';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make()
                    ->schema([
                        FilamentHelpers::translateFilamentField(
                            Forms\Components\TextInput::make('question')
                                ->label(__('Question')),
                            ['*']
                        ),
                    ]),

                Forms\Components\Section::make()
                    ->schema([
                        FilamentHelpers::translateFilamentField(
                            Forms\Components\TextInput::make('answer')
                                ->label(__('Answer')),
                            ['*']
                        ),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->emptyStateHeading(__('No FAQS'))
            ->columns([
                Tables\Columns\TextColumn::make('id')
                    ->translateLabel()
                    ->searchable()->forceSearchCaseInsensitive()
                    ->sortable()
                    ->toggleable()
                    ->toggledHiddenByDefault(),

                Tables\Columns\TextColumn::make('question')
                    ->translateLabel()
                    ->searchable()->forceSearchCaseInsensitive()
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('answer')
                    ->translateLabel()
                    ->searchable()->forceSearchCaseInsensitive()
                    ->sortable()
                    ->toggleable()
                    ->toggledHiddenByDefault(),

                Tables\Columns\ToggleColumn::make('is_active')
                    ->translateLabel()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('created_at')
                    ->translateLabel()
                    ->sortable()
                    ->toggleable()
                    ->dateTime()
                    ->toggledHiddenByDefault(),

                Tables\Columns\TextColumn::make('updated_at')
                    ->translateLabel()
                    ->sortable()
                    ->toggleable()
                    ->dateTime(),
            ])
            ->filters([
                TernaryFilter::make('is_active')
                    ->translateLabel()
                    ->indicator(__('is_active'))
                    ->queries(
                        true: fn(Builder $query) => $query->active(),
                        false: fn(Builder $query) => $query->active(false)
                    ),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort(config('eloquent-sortable.order_column_name'))
            ->reorderable(config('eloquent-sortable.order_column_name'))->paginatedWhileReordering();
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFAQs::route('/'),
            'create' => Pages\CreateFAQ::route('/create'),
            'edit' => Pages\EditFAQ::route('/{record}/edit'),
        ];
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Settings');
    }
}
